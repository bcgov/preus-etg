# Build/CI pipeline for ETG application

name: Deploy ETG to PROD
run-name: Deployment to PROD by ${{ github.actor }}
on: 
  workflow_dispatch:
    inputs:
      build_runid:
        description: "Run ID of the workflow that contains the build artifacts"
        required: true
        type: string
env:
  NUGET_CERT_REVOCATION_MODE: offline # Bypass cert validation during NuGet Restore
  HTTP_PROXY: ${{ vars.HTTP_PROXY_CD }}
  HTTPS_PROXY: ${{ vars.HTTP_PROXY_CD }}
  NO_PROXY: ${{ vars.NO_PROXY }}
  
jobs:

  deploy_prod:
    name: Deploy to PROD
    environment: Prod
    runs-on: etg-cd-prod
    
    steps:
    
    - name: Clear Working Directory
      run: |
        Write-Host "Clearing workspace directory..."
        Remove-Item -Path "${{ github.workspace }}\CJG*" -Recurse -Force
      shell: powershell
    
    - uses: actions/download-artifact@v4
      with:
        pattern: "*-${{ vars.BUILD_CONFIGURATION }}*"
        merge-multiple: true
        github-token: ${{ secrets.GH_API_TOKEN }}
        run-id: ${{ github.event.inputs.build_runid }}              
      
    - name: Back up DB migration program
      run: xcopy /E /I /Y CJG.Infrastructure.EF\bin\${{ vars.BUILD_CONFIGURATION }} ${{ vars.DB_BACKUP_FOLDER }}\${{ vars.ENVIRONMENT }}\Databases\
      shell: cmd
      
    - name: Back up database
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force        
        ${{ vars.CD_SCRIPTS_FOLDER }}\backupdatabase.ps1 "${{ vars.DB_SERVER }}" "${{ vars.DB_NAME }}" "${{ vars.DB_RELEASE_USER }}" "${{ secrets.DB_RELEASE_PASSWORD }}" "${{ vars.DB_BACKUP_FOLDER }}\${{ vars.ENVIRONMENT }}\Databases" "${{ vars.DB_NAME }}-Backup.bak" 5
      shell: powershell

    - name: Update database (run EF migration)
      run: migrate.exe CJG.Infrastructure.EF.dll /startupConfigurationFile=CJG.Infrastructure.EF.dll.config
      working-directory: CJG.Infrastructure.EF\bin\${{ vars.BUILD_CONFIGURATION }}\
      shell: cmd 
      
    - name: Back up Grant Opening Service
      run: xcopy /E /I /Y "${{ vars.SCHEDULED_TASKS_FOLDER }}\${{ vars.ENVIRONMENT }}\GrantOpeningService" "${{ vars.SCHEDULED_TASKS_BACKUP_FOLDER }}\${{ vars.ENVIRONMENT }}\Scheduled Tasks\GrantOpeningService\"
      shell: cmd
      
    - name: Deploy Grant Opening Service
      run: xcopy /E /I /Y "CJG.Infrastructure.GrantOpeningService\bin\${{ vars.BUILD_CONFIGURATION }}" "${{ vars.SCHEDULED_TASKS_FOLDER }}\${{ vars.ENVIRONMENT }}\GrantOpeningService\"
      shell: cmd
      
    - name: Back up Notification Service
      run: xcopy /E /I /Y "${{ vars.SCHEDULED_TASKS_FOLDER }}\${{ vars.ENVIRONMENT }}\NotificationService" "${{ vars.SCHEDULED_TASKS_BACKUP_FOLDER }}\${{ vars.ENVIRONMENT }}\Scheduled Tasks\NotificationService\"
      shell: cmd
      
    - name: Deploy Notification Service
      run: xcopy /E /I /Y "CJG.Infrastructure.NotificationService\bin\${{ vars.BUILD_CONFIGURATION }}" "${{ vars.SCHEDULED_TASKS_FOLDER }}\${{ vars.ENVIRONMENT }}\NotificationService\"
      shell: cmd
      
    - name: Back up Reporting Service
      run: xcopy /E /I /Y "${{ vars.SCHEDULED_TASKS_FOLDER }}\${{ vars.ENVIRONMENT }}\ReportingService" "${{ vars.SCHEDULED_TASKS_BACKUP_FOLDER }}\${{ vars.ENVIRONMENT }}\Scheduled Tasks\ReportingService\"
      shell: cmd
      
    - name: Deploy Reporting Service
      run: xcopy /E /I /Y "CJG.Infrastructure.ReportingService\bin\${{ vars.BUILD_CONFIGURATION }}" "${{ vars.SCHEDULED_TASKS_FOLDER }}\${{ vars.ENVIRONMENT }}\ReportingService\"
      shell: cmd

    - name: Back up Web Application
      run: xcopy /E /I /Y "${{ vars.WEB_FOLDER }}\${{ vars.ENVIRONMENT }}" "${{ vars.WEB_BACKUP_FOLDER }}\${{ vars.ENVIRONMENT }}\"
      shell: cmd
      
    - name: Copy Web Application to Server
      run: xcopy /E /I /Y "CJG.Web.External\obj\${{ vars.BUILD_CONFIGURATION }}\Package\${{ vars.WEB_DEPLOY_PACKAGE_NAME }}" "${{ vars.WEB_RELEASE_FOLDER }}\${{ vars.ENVIRONMENT }}\"
      shell: cmd

    - name: Run Config-Replace script on Offline Page
      run: |
        $now = Get-Date -Format "dddd MMMM dd, yyyy"
        $maintenance_start = Get-Date
        $maintenance_duration = ${{ vars.MAINTENANCE_DURATION }}
        $maintenance_end = $maintenance_start.AddMinutes($maintenance_duration)       
        $config_values = (@{tag="maintenance-date"; val="$now"}, @{tag="maintenance-start"; val="$maintenance_start"}, @{tag="maintenance-end"; val="$maintenance_end"})        
        ${{ vars.CD_SCRIPTS_FOLDER }}\replaceoffline.ps1 "${{ vars.WEB_FOLDER }}\app_offline_template.htm" "${{ vars.WEB_FOLDER }}\${{ vars.ENVIRONMENT }}\app_offline.htm" ($config_values) $maintenance_duration
      shell: powershell
      
    - name: Deploy web application (Web Deploy)
      run: |        
        "${{ vars.MSDEPLOY_PATH }}" ^
        -verb:sync ^
        -source:package="${{ vars.WEB_RELEASE_FOLDER }}\${{ vars.ENVIRONMENT }}\${{ vars.WEB_DEPLOY_PACKAGE_NAME }}" ^
        -dest:auto,userName="${{ vars.SERVICE_ACCOUNT }}",password="${{ secrets.SERVICE_ACCOUNT_PASSWORD }}" ^
        -setParam:name="IIS Web Application Name",value="${{ vars.WEB_SERVER_NAME }}" ^
        -setParam:name="CJG-Web.config Connection String",value="data source=${{ vars.DB_INSTANCE }};initial catalog=${{ vars.DB_NAME }};User Id=${{ vars.DB_USER }};Password=${{ secrets.DB_PASSWORD }};MultipleActiveResultSets=True;App=EntityFramework" ^
        -setParam:name="BCeIDWebService_UserName",value="${{ vars.BCEID_USER }}" ^
        -setParam:name="BCeIDWebService_Password",value="${{ secrets.BCEID_PASSWORD }}" ^
        -setParam:name="BCeIDWebService_OnlineServiceId",value="${{ secrets.BCEID_ONLINE_SERVICE_ID }}" ^
        -setParam:name="BCeIDWebService_Timeout",value="${{ vars.BCEID_TIMEOUT }}" ^
        -setParam:name="BCeIDWebServiceLogoffURL",value="${{ vars.BCEID_LOGOFF_URL }}" ^
        -setParam:name="BCeIDWebServiceLogoffReturnURL",value="${{ vars.BCEID_LOGOFF_RETURN_URL }}" ^
        -setParam:name="SMTPServer",value="${{ vars.SMTP_SERVER }}" ^
        -setParam:name="EnableEmails",value="${{ vars.EMAIL_ENABLED }}" ^
        -setParam:name="EmailFromAddress",value="${{ vars.EMAIL_FROM_ADDRESS }}" ^
        -setParam:name="EmailFromDisplayName",value="${{ vars.EMAIL_FROM_NAME }}" ^
        -setParam:name="MaxUploadSizeInBytes",value="${{ vars.MAX_UPLOAD_SIZE }}" ^
        -setParam:name="ReCaptchaSecret",value="${{ secrets.RECAPTCHA_SECRET }}" ^
        -setParam:name="CanadaPostAutoCompleteApiKey",value="${{ secrets.CANADAPOST_AUTOCOMPLETE_APIKEY }}"         
      shell: cmd
