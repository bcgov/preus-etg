# Build/CI pipeline for ETG application

name: Build and Deploy ETG to DEV/QA
run-name: Build of commit ${{ github.sha }} by ${{ github.actor }}
on: workflow_dispatch
env:
  NUGET_CERT_REVOCATION_MODE: offline # Bypass cert validation during NuGet Restore
  HTTP_PROXY: ${{ vars.HTTP_PROXY }}
  HTTPS_PROXY: ${{ vars.HTTP_PROXY }}
  NO_PROXY: ${{ vars.NO_PROXY }}

jobs:
  setup_build:
    name: Set up Build Environment
    runs-on: etg-ci
    outputs:
      build_number: ${{ steps.generate_build_number.outputs.build_number }}
    steps:
      - name: Generate custom build number and set artifacts path
        id: generate_build_number
        run: |
          $timestamp = (Get-Date).ToString("yyyyMMdd")
          $buildNumber = "$timestamp.${env:GITHUB_RUN_NUMBER}"
          echo "BUILD_NUMBER=$buildNumber" >> $env:GITHUB_ENV
          echo "build_number=$buildNumber" >> $GITHUB_OUTPUT
          echo "::set-output name=build_number::$buildNumber"
        shell: powershell  

      - name: Display build number
        run: echo "Build number is $env:BUILD_NUMBER"
        shell: powershell

  build_dev_qa:
    name: Build for DEV/QA
    runs-on: etg-ci
    needs: setup_build
    strategy:
      matrix:
        environment: [dev, qa]  # Define environments as a matrix for parallel deployment
    env:
      BUILD_NUMBER: ${{ needs.setup_build.outputs.build_number }}
      ARTIFACTS_PATH: ${{ github.workspace }}\..\_artifacts\${{ needs.setup_build.outputs.build_number }}\${{ matrix.environment }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up NuGet
        uses: NuGet/setup-nuget@v2.0.0

      - name: NuGet Restore
        run: | 
          nuget restore "${{github.workspace}}\ETG.sln"

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Set up npm
        uses: actions/setup-node@v4
        with:
          node-version: '12.16.1'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install Node.js dependencies
        run: npm install
        working-directory: "CJG.Web.External/UI"

      - name: Run Node.js build
        run: npm run ci-build
        working-directory: "CJG.Web.External/UI"
        
      # Add other steps like Config-Replace scripts as needed...

      - name: MSBuild .NET framework
        run: |
          msbuild.exe "${{github.workspace}}\ETG.sln" /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:IncrementalBuild=true /P:SkipExtraFilesOnServer=True /p:platform="Any CPU" /p:configuration="${{ vars.BUILD_CONFIGURATION }}"
        working-directory: ${{github.workspace}}

      - name: Create artifacts directory
        run: |
            if (-Not (Test-Path -Path "${{ env.ARTIFACTS_PATH }}")) {
              New-Item -ItemType Directory -Path "${{ env.ARTIFACTS_PATH }}"
            }
        shell: powershell

      # Upload artifacts as done in your original pipeline...

  deploy_dev_qa:
    name: Deploy to DEV/QA
    runs-on: etg-cd-dev
    needs: [setup_build, build_dev_qa]
    strategy:
      matrix:
        environment: [dev, qa]  # Same matrix for parallel deployment
    env:
      BUILD_NUMBER: ${{ needs.setup_build.outputs.build_number }}
      ARTIFACTS_PATH: ${{ github.workspace }}\..\_artifacts\${{ needs.setup_build.outputs.build_number }}\${{ matrix.environment }}
    
    steps:
      - name: Back up DB migration program
        run: xcopy /E /I /Y CJG.Infrastructure.EF\bin\${{ vars.BUILD_CONFIGURATION }} ${{ vars.DB_BACKUP_FOLDER }}\${{ matrix.environment }}\Databases\
        shell: cmd

      - name: Back up database
        run: |
          ${{ vars.CD_SCRIPTS_FOLDER }}\backupdatabase.ps1 "${{ vars.DB_SERVER }}" "${{ vars.DB_NAME }}" "${{ vars.DB_RELEASE_USER }}" "${{ secrets.DB_RELEASE_PASSWORD }}" "${{ vars.DB_BACKUP_FOLDER }}\${{ matrix.environment }}\Databases" "Pre-release DB Backup ${{ env.BUILD_NUMBER }}.bak" 5
        shell: powershell

      - name: Update database (run EF migration)
        run: migrate.exe CJG.Infrastructure.EF.dll /startupConfigurationFile=CJG.Infrastructure.EF.dll.config
        working-directory: CJG.Infrastructure.EF\bin\${{ matrix.environment }}\
        shell: cmd

      - name: Deploy Grant Opening Service
        run: xcopy /E /I /Y "CJG.Infrastructure.GrantOpeningService\bin\${{ vars.BUILD_CONFIGURATION }}" "${{ vars.SCHEDULED_TASKS_FOLDER }}\${{ matrix.environment }}\GrantOpeningService\"
        shell: cmd

      # Continue with other services like NotificationService, ReportingService, etc.

