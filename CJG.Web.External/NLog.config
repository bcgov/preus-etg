<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="true"
      internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log">

  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <variable name="logDirectory" value="${basedir}\Logs"/>
  <variable name="logFileName" value="CJG-${shortdate}.log"/>
  <extensions>
    <!--
    Load NLog.Web to enable ASP.NET-specific functionality
    -->
    <add assembly="NLog.Web"/>
  </extensions>

  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <targets>

    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!-- Log message to event log  -->
    <!--<target xsi:type="EventLog" name="eventLog" source="FeedImporter" layout="${message}${newline}Call site: ${callsite:className=true:methodName=true}${newline}Logger: ${logger}"/>-->
    <!-- Log message to file. -->
    <target xsi:type="File" name="file" fileName="${logDirectory}/${logFileName}" concurrentWrites="false" header="----------------------------------------${newline}--${date}--${newline}----------------------------------------" layout="${date:format=HH\:mm\:ss.fff} ${level}: ${identity} ${aspnet-request:serverVariable=HTTP_URL} ${message} ${exception:format=tostring}" footer="----------------------------------------${newline}--${date}--${newline}----------------------------------------"/>
    <!-- Log message to file. -->
    <!-- Log message to database -->
    <target xsi:type="Database" name="database" connectionStringName="CJG">
      <commandText>
        <![CDATA[
        INSERT INTO [dbo].[Logs] ( [Level], [Application], [Message], [Exception], [UserName], [ServerName], [Url], [RemoteAddress], [DateAdded] ) VALUES ( @Level, @Application, @Message, @Exception, @UserName, @ServerName, @Url, @RemoteAddress, GETUTCDATE() )
        DECLARE @LogCleanedOn DATETIME
        SET @LogCleanedOn = ISNULL((SELECT CAST([Value] AS DATETIME) FROM [dbo].[Settings] WHERE [Key] = 'LogCleanedOn'), DATEADD(DAY, -14, GETUTCDATE()))
        IF (@LogCleanedOn < DATEADD(DAY, -7, GETUTCDATE())) 
        BEGIN
          DELETE FROM [dbo].[Logs] WHERE [DateAdded] < DATEADD(DAY, -7, GETUTCDATE())
          UPDATE [dbo].[Settings] SET [Value] = GETUTCDATE() WHERE [Key] = 'LogCleanedOn'
        END
        ]]>
      </commandText>
      <parameter name="@Level" layout="${level}"/>
      <parameter name="@Application" layout="${processname}: ${iis-site-name}"/>
      <parameter name="@Message" layout="${message}"/>
      <parameter name="@Exception" layout="${exception:tostring}${newline}${stacktrace:format=raw}"/>
      <parameter name="@UserName" layout="${identity}"/>
      <parameter name="@ServerName" layout="${aspnet-request:serverVariable=SERVER_NAME"/>
      <parameter name="@url" layout="${aspnet-request:serverVariable=HTTP_URL"/>
      <parameter name="@RemoteAddress" layout="${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT"/>
    </target>
  </targets>

  <rules>
    <!-- add your logging rules here -->

    <logger name="*" minlevel="Trace" writeTo="file" />
    <!--<logger name="*" minlevel="Error" writeTo="eventlog" />-->
    <logger name="*" minlevel="Trace" writeTo="database" />
  </rules>
</nlog>
