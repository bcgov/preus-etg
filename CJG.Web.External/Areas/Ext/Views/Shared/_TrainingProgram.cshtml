@using CJG.Core.Entities
@model CJG.Web.External.Areas.Ext.Models.TrainingProgramViewModel

@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.GrantApplicationId)
@Html.HiddenFor(model => model.TrainingProgramState)
@Html.HiddenFor(model => model.EstimatedParticipants)
@Html.HiddenFor(model => model.RowVersion)
<h3 class="subheader--body">Training Program</h3>

<div class="form__group">

    <label class="form__label" for="@Html.IdFor(model => model.CourseTitle)">Training course title <abbr title="Required">*</abbr></label>

    <div class="form__control">
        @Html.TextBoxFor(model => model.CourseTitle, new { @class = "input--medium" })
        @Html.ValidationMessageFor(model => model.CourseTitle)
    </div>
</div>

<div class="form__group form__group--date">
    <label class="form__label" for="@Html.IdFor(model => model.StartMonth)">Training start date <abbr title="Required">*</abbr></label>

    <p>
        Your training start date must fall in the period <text>@Model.TrainingPeriodStart.Value.ToLocalMorning().ToString("yyyy-MM-dd")</text>
        to <text>@(Model.TrainingPeriodEnd.Value.ToLocalMidnight().ToString("yyyy-MM-dd"))</text> for the grant you have selected and it may not be before your application submission date.
    </p>
    @Html.TextBox(nameof(Model.TrainingPeriodStart), $"{Model.TrainingPeriodStart.Value.ToLocalMorning():yyyy-MM-dd}", htmlAttributes: new { @type = "hidden" })
    @Html.TextBox(nameof(Model.TrainingPeriodEnd), $"{Model.TrainingPeriodEnd.Value.ToLocalMidnight():yyyy-MM-dd}", htmlAttributes: new { @type = "hidden" })

    <div class="form__control">
        <div class="field__date datefield" id="training-start-date" data-end-date-id="training-end-date">
            <div class="selectmenu field__date--month">
                <select data-bind="@Html.IdFor(model => model.StartMonth)" data-validate="false"></select>
            </div>
            <div class="selectmenu field__date--day">
                <select data-bind="@Html.IdFor(model => model.StartDay)" data-validate="false"></select>
            </div>
            <div class="selectmenu field__date--year">
                <select data-bind="@Html.IdFor(model => model.StartYear)" data-validate="false" data-start="@Model.TrainingPeriodStart.Value.ToLocalMorning().ToString("yyyy")" data-end="@Model.TrainingPeriodStart.ValueToLocalMorning().AddYears(2).ToString("yyyy")"></select>
            </div>
            @Html.HiddenFor(model => model.StartDay)
            @Html.HiddenFor(model => model.StartMonth)
            @Html.HiddenFor(model => model.StartYear)
            @Html.TextBox(nameof(Model.StartDate), $"{(Model.StartDate.HasValue ? (DateTime?)Model.StartDate.Value.ToLocalMorning() : null):yyyy-MM-dd}", htmlAttributes: new { @type = "hidden", data_val_date = "Select a valid date." })
        </div>
        <div class="block__form--message-wrapper">
            @Html.ValidationMessageFor(model => model.StartDate)
            @Html.ValidationMessageFor(model => model.StartDay)
            @Html.ValidationMessageFor(model => model.StartMonth)
            @Html.ValidationMessageFor(model => model.StartYear)
        </div>
    </div>
</div>

<div class="form__group form__group--date">
    <label class="form__label" for="@Html.IdFor(model => model.EndMonth)">Training end date <abbr title="Required">*</abbr></label>

    <div class="form__control">
        <div class="field__date datefield" id="training-end-date" data-start-date-id="training-start-date">
            <div class="selectmenu field__date--month">
                <select data-bind="@Html.IdFor(model => model.EndMonth)" data-validate="false"></select>
            </div>
            <div class="selectmenu field__date--day">
                <select data-bind="@Html.IdFor(model => model.EndDay)" data-validate="false"></select>
            </div>
            <div class="selectmenu field__date--year">
                <select data-bind="@Html.IdFor(model => model.EndYear)" data-validate="false" data-start="@Model.TrainingPeriodStart.Value.ToLocalMorning().ToString("yyyy")" data-end="@Model.TrainingPeriodStart.Value.ToLocalMorning.AddYears(2).ToString("yyyy")"></select>
            </div>
            @Html.HiddenFor(model => model.EndDay)
            @Html.HiddenFor(model => model.EndMonth)
            @Html.HiddenFor(model => model.EndYear)
            @Html.TextBox(nameof(Model.EndDate), $"{(Model.EndDate.HasValue ? (DateTime?)Model.EndDate.Value.ToLocalMidnight() : null):yyyy-MM-dd}", htmlAttributes: new { @type = "hidden", data_val_date = "Select a valid date." })
        </div>
        <div class="block__form--message-wrapper">
            @Html.ValidationMessageFor(model => model.EndDate)
            @Html.ValidationMessageFor(model => model.EndDay)
            @Html.ValidationMessageFor(model => model.EndMonth)
            @Html.ValidationMessageFor(model => model.EndYear)
        </div>
    </div>
</div>

<div class="form__group form__group--checkbox-list">
    <label class="form__label" for="@Html.IdFor(model => model.DeliveryMethods)">Primary Delivery method <abbr title="Required">*</abbr></label>

    <div class="form__control">
        <ul>
            @for (var i = 0; i < Model.DeliveryMethods.Count(); i++)
            {
                <li class="form-item">
                    @Html.CheckBoxFor(model => model.DeliveryMethods[i].IsSelected)
                    <label for="@Html.IdFor(model => model.DeliveryMethods[i].IsSelected)">@Model.DeliveryMethods[i].Caption</label>
                    @Html.HiddenFor(model => model.DeliveryMethods[i].Id)
                </li>
            }
        </ul>

        @for (var i = 0; i < Model.DeliveryMethods.Count(); i++)
        {
            @Html.ValidationMessageFor(model => model.DeliveryMethods[i].IsSelected)
        }

        @Html.ValidationMessageFor(model => model.DeliveryMethods)
    </div>
</div>

<div class="form__group">
    <label class="form__label" for="@Html.IdFor(model => model.TotalTrainingHours)">Total training hours <abbr title="Required">*</abbr></label>

    <div class="form__control">
        @Html.TextBoxFor(model => model.TotalTrainingHours, new { @class = "input--small input--integer", maxlength = 5 })
        @Html.ValidationMessageFor(model => model.TotalTrainingHours)
    </div>
</div>

<div class="form__group">
    <label class="form__label" for="@Html.IdFor(model => model.SkillLevelId)">Skill level <abbr title="Required">*</abbr></label>

    <div class="form__control">
        <div class="selectmenu">
            @Html.DropDownListFor(model => model.SkillLevelId, new SelectList(Model.SkillLevels.OrderBy(x => x.Caption), "Id", "Caption"),
            DropDownListHelper.SelectValueText,
            new { @class = "input--medium" })
        </div>
        @Html.ValidationMessageFor(model => model.SkillLevelId)
    </div>
</div>

<div class="form__group js-skills-focus">
    <label class="form__label" for="@Html.IdFor(model => model.SkillFocusId)">Training skills focus <abbr title="Required">*</abbr></label>

    <div class="form__control">
        <div class="selectmenu">
            @Html.DropDownListFor(model => model.SkillFocusId, new SelectList(Model.SkillsFocuses.OrderBy(x => x.Caption), "Id", "Caption"),
            DropDownListHelper.SelectValueText, new { @class = "input--medium" })
        </div>
        @Html.ValidationMessageFor(model => model.SkillFocusId)
    </div>
</div>


<div class="js-skills-section form__section--hidden">

    <div class="form__group">
        <label class="form__label" for="@Html.IdFor(model => model.InDemandOccupations)">Apprenticeship training is for <abbr title="Required">*</abbr></label>

        <div class="form__control">
            <div class="selectmenu">
                @Html.DropDownListFor(model => model.InDemandOccupationId, new SelectList(Model.InDemandOccupations.OrderBy(x => x.Caption), "Id", "Caption"),
                DropDownListHelper.SelectValueText, new { @class = "input--medium" })
            </div>
            @Html.ValidationMessageFor(model => model.InDemandOccupationId)
        </div>
    </div>

    <div class="form__group">
        <label class="form__label" for="@Html.IdFor(model => model.InDemandOccupations)">Which level is the training <abbr title="Required">*</abbr></label>

        <div class="form__control">
            <div class="selectmenu">
                @Html.DropDownListFor(model => model.TrainingLevelId, new SelectList(Model.TrainingLevels.OrderBy(x => x.Caption), "Id", "Caption"),
                DropDownListHelper.SelectValueText, new { @class = "input--medium" })
            </div>
            @Html.ValidationMessageFor(model => model.TrainingLevelId)
        </div>
    </div>


    @*<div class="form__group form__group--radio-inline js-underrepresented">
        <label class="form__label">Are all participants taking apprenticeship or foundation programs members from the underrepresented groups in the labour force <abbr title="Required">*</abbr></label>

        <div class="form__control">
            <div class="form-item">
                @Html.RadioButtonFor(model => model.MemberOfUnderRepresentedGroup, true, new { id = "MemberOfUnderRepresentedGroupYes" })
                <label for="MemberOfUnderRepresentedGroupYes">Yes</label>
            </div>

            <div class="form-item">
                @Html.RadioButtonFor(model => model.MemberOfUnderRepresentedGroup, false, new { id = "MemberOfUnderRepresentedGroupNo" })
                <label for="MemberOfUnderRepresentedGroupNo">No</label>
            </div>

            @Html.ValidationMessageFor(model => model.MemberOfUnderRepresentedGroup)
        </div>
    </div>*@

    <div class="js-underrepresented-section form__section--hidden">
        <div class="form__group form__group--checkbox-list">
            <label class="form__label">Select all that apply <abbr title="Required">*</abbr></label>

            <div class="form__control">
                <ul>
                    @for (var i = 0; i < Model.UnderRepresentedGroups.Count(); i++)
                    {
                        <li>
                            @Html.CheckBoxFor(model => model.UnderRepresentedGroups[i].IsSelected, new { data_val_required = "Please fill in the required fields" })
                            <label for="@Html.IdFor(model => model.UnderRepresentedGroups[i].IsSelected)">@Model.UnderRepresentedGroups[i].Caption</label>
                            @Html.HiddenFor(model => model.UnderRepresentedGroups[i].Id)
                        </li>
                    }
                </ul>
                @for (var i = 0; i < Model.UnderRepresentedGroups.Count(); i++)
                {
                    @Html.ValidationMessageFor(model => model.UnderRepresentedGroups[i].IsSelected)
                }
            </div>
        </div>
    </div>

</div>

<div class="form__group js-qualifications">
    <label class="form__label" for="@Html.IdFor(model => model.ExpectedQualificationId)">Expected certificates, qualifications or credentials <abbr title="Required">*</abbr></label>

    <div class="form__control">
        <div class="selectmenu">
            @Html.DropDownListFor(model => model.ExpectedQualificationId, new SelectList(Model.ExpectedQualifications.OrderBy(x => x.Caption), "Id", "Caption"),
            DropDownListHelper.SelectValueText, new { @class = "input--medium" })
        </div>
        @Html.ValidationMessageFor(model => model.ExpectedQualificationId)
    </div>
</div>

<div class="js-qualifications-section form__section--hidden">
    <div class="form__group">
        <label class="form__label" for="@Html.IdFor(model => model.TitleOfQualification)">Title of certificates, qualifications or credentials <abbr title="Required">*</abbr></label>

        <div class="form__control">
            @Html.TextBoxFor(model => model.TitleOfQualification, new { @class = "input--medium" })
            @Html.ValidationMessageFor(model => model.TitleOfQualification)
        </div>
    </div>
</div>

<div class="form__group form__group--radio-inline">
    <label class="form__label">Have you offered this type of training to employees in the past? <abbr title="Required">*</abbr></label>

    <div class="form__control">
        <div class="form-item">
            @Html.RadioButtonFor(model => model.HasOfferedThisTypeOfTrainingBefore, true, new { id = "HasOfferedThisTypeOfTrainingBeforeYes" })
            <label for="HasOfferedThisTypeOfTrainingBeforeYes">Yes</label>
        </div>

        <div class="form-item">
            @Html.RadioButtonFor(model => model.HasOfferedThisTypeOfTrainingBefore, false, new { id = "HasOfferedThisTypeOfTrainingBeforeNo" })
            <label for="HasOfferedThisTypeOfTrainingBeforeNo">No</label>
        </div>

        @Html.ValidationMessageFor(model => model.HasOfferedThisTypeOfTrainingBefore)
    </div>
</div>

<div class="form__group form__group--radio-inline js-additional-funding">
    <label class="form__label">Have you received or requested any other government or third-party funding for this training? <abbr title="Required">*</abbr></label>

    <div class="form__control">
        <div class="form-item">
            @Html.RadioButtonFor(model => model.HasRequestedAdditionalFunding, true, new { id = "HasRequestedAdditionalFundingYes" })
            <label for="HasRequestedAdditionalFundingYes">Yes</label>
        </div>

        <div class="form-item">
            @Html.RadioButtonFor(model => model.HasRequestedAdditionalFunding, false, new { id = "HasRequestedAdditionalFundingNo" })
            <label for="HasRequestedAdditionalFundingNo">No</label>
        </div>
        @Html.ValidationMessageFor(model => model.HasRequestedAdditionalFunding)
    </div>
</div>

<div class="js-additional-funding-section form__section--hidden">
    <div class="form__group">
        <label class="form__label form__label--align-top" for="@Html.IdFor(model => model.DescriptionOfFundingRequested)">Please describe funding received or requested<abbr title="Required">*</abbr></label>

        <div class="form__control">
            @Html.TextAreaFor(model => model.DescriptionOfFundingRequested, new { @class = "input--full textarea--short" })
            @Html.ValidationMessageFor(model => model.DescriptionOfFundingRequested)
        </div>
    </div>
</div>
