@model CJG.Web.External.Areas.Part.Models.ParticipantInfoViewModel
@{
    ViewBag.Title = "Participant information";
}

<script type="text/javascript">
    function getViewModel() {
        return @Html.Raw(Json.Encode(Model));
    }
</script>

<div class="main" ng-controller="ParticipantInformationView" ng-init="init()" ng-session-duration="@Model.ParticipantInfoStep1ViewModel.TimeoutPeriod">
    {{ model.ParticipantInfoStep0ViewModel }}
    <div class="form-section">
        <div class="float-left">
            <h1 class="header__title sentence--case">Participant information</h1>
        </div>
    </div>

    <div ng-if="alert.message" class="row row--alert">
        <div class="alert" ng-class="'alert--' + alert.type" role="alert" ng-bind-html="alert.message"></div>
    </div>

    @Html.Partial("_Step2")
    @Html.Partial("_Step3")
    @Html.Partial("_Step4", Model)
    @Html.Partial("_Step5")

    <div class="button-group">
        <button type="button"
                class="btn btn--secondary btn--back"
                ng-click="previous()"
                ng-show="model.ParticipantInfoStep0ViewModel.Step > 2">
            Previous
        </button>
        <button type="button"
                class="btn btn--primary btn--forward"
                style="float: right;"
                ng-click="next()"
                ng-show="model.ParticipantInfoStep0ViewModel.Step < 5">
            Continue
        </button>
        <button type="button"
                class="btn btn--primary"
                ng-click="cancel()"
                ng-show="model.ParticipantInfoStep0ViewModel.Step == 5">
            I do not provide my consent
        </button>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function() {
        setTimeout(function() {
            // Destroy existing addressCompletes that are hooked up - they interfere with the load events
            addressComplete.destroy();

            var fields = [
                { element: "AddressLine1", field: "Line1", mode: pca.fieldMode.DEFAULT },
                { element: "AddressLine2", field: "Line2", mode: pca.fieldMode.POPULATE },
                { element: "City", field: "City", mode: pca.fieldMode.POPULATE },
                { element: "PostalCode", field: "PostalCode", mode: pca.fieldMode.POPULATE },
                { element: "Country", field: "CountryName", mode: pca.fieldMode.COUNTRY }
            ];

            const options = {
                key: "@Model.CanadaPostKey",
                culture: "en-us",
                list: {
                    className: 'participant-view'
                }
            };

            var addressLocation = new pca.Address(fields, options);
            addressLocation.listen("populate", function(address) {
                 document.getElementById("RegionId").value = "string:" + address.ProvinceCode;
            });
        }, 1500);
    });

</script>