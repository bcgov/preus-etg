/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $gutter) {
  margin-left: auto;
  margin-right: auto;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
  @if not $enable-flex {
    @include clearfix();
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $gutter) {
  @if $enable-flex {
    display: flex;
    flex-wrap: wrap;
  } @else {
    @include clearfix();
  }
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin make-col($gutter: $gutter) {
  position: relative;
  @if not $enable-flex {
    float: left;
  }
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-col-span($size, $columns: $grid-columns) {
  @include grid-column($size);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $gutter, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
  @each $breakpoint in map-keys($breakpoints) {
    @for $i from 1 through $columns {
      .col--#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
      @include media-breakpoint-only($breakpoint) {
        .wrapper--#{$breakpoint}-#{$i} > .block {
          @include omega(#{$i}n);
          &:nth-child(#{$i}n+1) {
            clear: left;
          }
        }
      }
      .shift--#{$breakpoint}-#{$i} {
        @include shift($i);
      }
    }
    @include media-breakpoint-up($breakpoint) {
      // Work around cross-media @extend (https://github.com/sass/sass/issues/1050)
      %grid-column-float-#{$breakpoint} {
        float: left;
      }
      @for $i from 1 through $columns {
        .col--#{$breakpoint}-#{$i} {
          // work around for bourbon neat as it adds margin-right to full column
          @if $i == 12 {
            width: 100%;
          } @else {
            @include make-col-span($i, $columns);
          }
        }
      }
      @each $modifier in (pull, push, offset) {
        @for $i from 0 through $columns {
          .col--#{$breakpoint}--#{$modifier}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns);
          }
        }
      }
    }
  }
}

@mixin nested-columns($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      @for $i from 1 through $columns {
        @for $j from 1 through $columns {
          .col--#{$breakpoint}--nested-#{$i}-#{$j} {
            @include grid-column($i of $j);
          }
        }
      }
    }
  }
}
