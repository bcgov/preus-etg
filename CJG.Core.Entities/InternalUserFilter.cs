using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

namespace CJG.Core.Entities
{
	/// <summary>
	/// InternalUserFilter sealed class, provides an ORM for internal user filters.
	/// </summary>
	public class InternalUserFilter : EntityBase
	{
		#region Properties
		/// <summary>
		/// get/set - The primary key which is generated by the datasource.
		/// </summary>
		[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		public int Id { get; set; }

		/// <summary>
		/// get/set - The foreign key to the <typeparamref name="InternalUser"/>.
		/// </summary>
		public int InternalUserId { get; set; }

		/// <summary>
		/// get/set - The <typeparamref name="InternalUser"/> who owns this filter.
		/// </summary>
		[ForeignKey(nameof(InternalUserId))]
		public virtual InternalUser User { get; set; }

		/// <summary>
		/// get/set - The UI friendly name of the filter.
		/// </summary>
		[Required, MaxLength(100)]
		public string Name { get; set; }

		/// <summary>
		/// get/set - A description of what this filter does.  This can be useful if we later choose to share filters.
		/// </summary>
		[MaxLength(1000)]
		public string Description { get; set; }

		/// <summary>
		/// get/set - The order to display the filters in.
		/// </summary>
		public int RowSequence { get; set; }

		/// <summary>
		/// get/set - A collection of filter attributes.
		/// </summary>
		public virtual ICollection<InternalUserFilterAttribute> Attributes { get; set; } = new List<InternalUserFilterAttribute>();
		#endregion

		#region Constructors
		/// <summary>
		/// Creates a new instance of a InternalUserFilter.
		/// </summary>
		public InternalUserFilter()
		{

		}

		/// <summary>
		/// Creates a new instance of a InternalUserFilter and initializes it with the specified values.
		/// </summary>
		/// <param name="name">The UI friendly name of the filter.</param>
		/// <param name="user">The InternalUser who owns this filter.</param>
		public InternalUserFilter(string name, InternalUser user)
		{
			this.Name = name;
			this.InternalUserId = user?.Id ?? throw new ArgumentNullException(nameof(user));
			this.User = user;
		}
		#endregion

		#region Methods
		/// <summary>
		/// Add a new attribute to the filter.
		/// </summary>
		/// <param name="key"></param>
		/// <param name="value"></param>
		/// <param name="logicalOperator"></param>
		/// <returns></returns>
		public InternalUserFilterAttribute AddAttribute(string key, string value, FilterOperator logicalOperator = FilterOperator.Equal)
		{
			if (String.IsNullOrWhiteSpace(key)) throw new ArgumentException("The argument 'key' is required.", nameof(key));
			if (String.IsNullOrWhiteSpace(value)) throw new ArgumentException("The argument 'value' is required.", nameof(value));

			var attribute = new InternalUserFilterAttribute(this, key, value, logicalOperator);
			this.Attributes.Add(attribute);
			return attribute;
		}

		/// <summary>
		/// Add a new attribute to the filter for an array of internal states.
		/// </summary>
		/// <param name="states"></param>
		/// <returns></returns>
		public InternalUserFilterAttribute AddIncludedStates(IEnumerable<ApplicationStateInternal> states)
		{
			if (states == null) throw new ArgumentNullException(nameof(states));

			var attribute = new InternalUserFilterAttribute(this, "States", String.Join(",", states.Select(s => (int)s)), FilterOperator.In);
			this.Attributes.Add(attribute);
			return attribute;
		}
		#endregion
	}
}
