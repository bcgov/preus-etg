using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

namespace CJG.Core.Entities
{
	/// <summary>
	/// <typeparamref name="InternalUserFilterAttribute"/> class, provides a way to identify a key, value pair and their operator.
	/// </summary>
	public class InternalUserFilterAttribute : EntityBase
	{
		/// <summary>
		/// get/set - The primary key which is generated by the datasource.
		/// </summary>
		[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		public int Id { get; set; }

		/// <summary>
		/// get/set - The foreign key to the <typeparamref name="InternalUserFitler"/>.
		/// </summary>
		public int InternUserFilterId { get; set; }

		/// <summary>
		/// get/set - The <typeparamref name="InternalUserFilter"/> that this attribute belongs to.
		/// </summary>
		[ForeignKey(nameof(InternUserFilterId))]
		public virtual InternalUserFilter Filter { get; set; }

		/// <summary>
		/// get/set - The key or field name that the filter will be applied to.
		/// </summary>
		[Required, MaxLength(250)]
		public string Key { get; set; }

		/// <summary>
		/// get/set - The value of this filter attribute.
		/// </summary>
		[MaxLength(500)]
		public string Value { get; set; }

		/// <summary>
		/// get/set - The operator to apply between the key and value.
		/// </summary>
		[Required, DefaultValue(FilterOperator.Equal)]
		public FilterOperator Operator { get; set; } = FilterOperator.Equal;

		public InternalUserFilterAttribute() { }

		public InternalUserFilterAttribute(InternalUserFilter filter, string key, string value, FilterOperator logicalOperator = FilterOperator.Equal)
		{
			if (string.IsNullOrWhiteSpace(key))
				throw new ArgumentException("Argument 'key' is required.", nameof(key));

			InternUserFilterId = filter?.InternalUserId ?? throw new ArgumentNullException(nameof(filter));
			Filter = filter;
			Key = key;
			Value = value;
			Operator = logicalOperator;
		}

		public InternalUserFilterAttribute(InternalUserFilter filter, string key, IEnumerable<ApplicationStateInternal> states)
		{
			if (states == null)
				throw new ArgumentNullException(nameof(states));

			InternUserFilterId = filter?.InternalUserId ?? throw new ArgumentNullException(nameof(filter));
			Filter = filter;
			Key = key;
			Value = string.Join(",", states.Select(s => (int)s));
			Operator = FilterOperator.In;
		}

		/// <summary>
		/// Update the attribute to be an array of internal states.
		/// </summary>
		/// <param name="states"></param>
		public void Update(IEnumerable<ApplicationStateInternal> states)
		{
			if (states == null)
				throw new ArgumentNullException(nameof(states));

			Key = "States";
			Value = string.Join(",", states.Select(s => (int)s));
			Operator = FilterOperator.In;
		}
	}
}
